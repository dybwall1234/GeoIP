<?xml version="1.0"?>
<article xmlns:r="http://www.r-project.org"
         xmlns:xi="http://www.w3.org/2003/XInclude"
	xmlns:sh="http://www.shell.org"
	xmlns:omg="http://www.omegahat.org"
	xmlns:c="http://www.C.org">

<articleinfo>

<title></title>

<author><firstname>Duncan</firstname><surname>Temple Lang</surname>
  <affiliation><orgname>University of California at Davis</orgname>
               <orgdiv>Department of Statistics</orgdiv>
  </affiliation>
</author>
</articleinfo>

<section>
<title></title>

<para>
This  document gives the short description 
of how this package is programmed.
Basically, the core code is programmatically 
generated using the <omg:pkg>RGCCTUFFI</omg:pkg>
package which uses
the <omg:pkg>RGCCTranslationUnit</omg:pkg>
package.  The run-time implementation of the
code relies on the <omg:pkg>Rffi</omg:pkg>
package to dynamically invoke C routines and access
global variables and elements of data structures.
</para>

<para>
The key is that we read the C code describing the
GeoIP API and obtain descriptions of the routines
and the data structures.
At its simplest, we create a C file that 
merely includes the relevant header files for the API.
In this case, these are GeoIP.h and GeoIPCity.h.
So our file is 
<c:code>
<xi:include href="Rgeoip.c" parse="text"/>
</c:code>

Next, we call gcc with the -fdump-translation-unit 
flag to generate the translation unit output that we can read:
<sh:code>
gcc -fdump-translation-unit -o /dev/null -c Rgeoip.c
</sh:code>
Now we have the description of the data structures and routines.
We can now have R read these and generate the code.
</para>
<para>
We do this by loading the <omg:pkg>RGCCTUFFI</omg:pkg>
package and using its <r:func>genTUInterface</r:func>.
By default, this will process all data structures and
all routines, including all of those from the regular
system header files. We only want those associate
with the GeoIP API. Fortunately, MaxMinds has
prefixed these routines and data structures with the
term "GeoIP".  So we can find the elements of interest
with this pattern. So we can generate our code with

<r:code>
library(RGCCTUFFI)
code = genTUInterface(system.file("doc", "Rgeoip.c.001t.tu", package = "GeoIP"), 
                      pattern = "^(GeoIP|geoip)", 
                      genDoc = TRUE)
</r:code>
</para>

<para>
Before we do anything with this code, we want to 
add some additional processing to the 
GeoIP_open function.
The argument to this function  is the name of a file.
So R users would expect to be able to use ~ in the path
of the file. Also, the C routine prints an error message on
the console, but it returns a NULL pointer if it does not succeed
in creating the database, i.e. because the file does not exist or 
is not readable.
So we should add the two expressions
<r:code eval="false">
 x1 = path.expand(x1)
 if(!file.exists(x1))
    stop("no such file ", x1)
</r:code>

We can add this code with some string manipulation of the code
in the <r:expr eval="false">code$funcs[["GeoIP_open"]]</r:expr>.
However, it is probably best to work on the R function directly:
<r:code eval="true">
f = code$funcs[["GeoIP_open"]]
tmp = parse(text = f)
fun = tmp[[1]][[3]][[2]]
b = fun[[3]]

v = expression({ x1 = path.expand(x1)
                    if(!file.exists(x1))
                      stop("no such file ", x1)
                 })

o = new("{")
o[2:3] = v[[1]][-1]
o[seq(4, length = length(b) - 1)] = b[-1]

fun[[3]] = o
</r:code>
If we didn't want to expand the path, it might be easier to check
if the return value is a NULL pointer via 
<r:func>isNilPointer</r:func>.
</para>
<para>


While we are changing this, we might as well add a default
value for the first argument which is the R variable 
<r:var>GeoIPData</r:var>. We do this with
<r:code>
fun[[2]][[1]] = as.name("GeoIPData")
</r:code>

And now we add this code back into the <r:expr>code$funcs</r:expr> list:
<r:code>
tmp[[1]][[3]][[2]] = fun
code$funcs[["GeoIP_open"]] = deparse(tmp[[1]])
</r:code>
So now we want to serialize this back to a character vector and
insert it back into <r:var>code</r:var>
<r:code eval="false">
con = textConnection(".dumb", "w", local = TRUE)
dput(fun, con)
code$funcs[["GeoIP_open"]] = c("GeoIP_open = ", textConnectionValue(con))
close(con)
</r:code>
</para>
<para>


We can immediately use this code in the same R session
by "defining" the different functions and classes:
<r:code eval="false">
library(Rffi)
dyn.load("/usr/local/lib/libGeoIP.dylib")

define(code)
</r:code>

Alternatively, we can write this code to a file for use in a package
or to be sourced directly into future R sessions.
For instance, to put this in the file R/RGeoIP.R, we might use
the command
<r:code>
cat( "library(Rffi)",
     "library(RAutoGenRunTime)",
     unlist(code[c("funcs", "dataStructs")]), sep = "\n\n",
    file = "../../R/RGeoIP.R")
</r:code>
We might also add code to load the DLL.
Alternatively, we can do this via an .onLoad function
and also load necessary libraries using a package's
DESCRIPTION file.
</para>

<para>
To generate documentation for the functions and classes, we
can use
<r:code>
if("docs" %in% names(code))
  toFile(code$docs, dir = "../../man")
</r:code>

We can then install this as part of a package or
use <r:func>source</r:func> to load the code.
We have to add a NAMESPACE file in order to use
the <r:func>.onLoad</r:func> function automatically.
Otherwise, we have to load the DSO ourselves.
</para>

</section>
<section>
<title>Using the Code</title>
<para>
Once we have installed the package or defined the code as above, 
we can start using the functions and classes immediately.
We can find the functions and the classes with:
<r:code>
library(GeoIP)
ls("package:GeoIP")
getClasses("package:GeoIP")
</r:code>

</para>
<para>
Then we can load a Geo-IP database and explore its meta data.
<r:code>
if(file.exists("/usr/local/share/GeoIP/GeoLiteCity.dat")) {
  db = GeoIP_open("/usr/local/share/GeoIP/GeoLiteCity.dat", GEOIP_STANDARD, FALSE)
  GeoIP_database_edition(db, return = FALSE)
  GeoIP_database_info(db, return = FALSE)
  GeoIP_num_countries()
  GeoIP_db_avail(GEOIP_ISP_EDITION)
}
</r:code>


</para>
<para>
We can use our functions to find the location of a server as follows:
<xi:include href="GeoIPTU.Rdb" xpointer="xmlns(r=http://www.r-project.org) xpointer(//r:code[@id='rsample1'])"/>
</para>
<para>
This illustrates using an IP address rather than a domain name:
<xi:include href="GeoIPTU.Rdb" xpointer="xmlns(r=http://www.r-project.org) xpointer(//r:code[@id='rsample2'])"/>
</para>

</section>
<section>
<title>Documentation</title>

<para>
We now have to document all of these functions, classes and methods.
There are 73 functions, 12 classes and
we have the class definition and methods
for the dollar ($) operator, coerce, names,
and a function to create an instance of the class, i.e. a constructor function.
</para>

</section>
</article>